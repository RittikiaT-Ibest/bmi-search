<!DOCTYPE html>
<html lang="th">
<head>
  <meta charset="UTF-8" />
  <title>กราฟแสดงผล BMI แยกตามชั้นและห้อง</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet" />
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body class="bg-gray-100 p-4">
<div class="max-w-4xl mx-auto bg-white p-6 rounded shadow">
  <h1 class="text-2xl font-bold text-center mb-6">กราฟแปลผล BMI ตามชั้น/ห้อง</h1>

  <div class="grid grid-cols-2 gap-4 mb-4">
    <select id="filterClass" class="p-2 border rounded">
      <option value="">-- เลือกชั้น --</option>
    </select>
    <select id="filterRoom" class="p-2 border rounded">
      <option value="">-- เลือกห้อง --</option>
    </select>
  </div>

  <canvas id="resultChart" height="120"></canvas>
</div>

<script>
const API_KEY = "AIzaSyD-IbEa-_poD4yLCaS6S3iCFd07U3x54-o";
const SHEET_ID = "1nR3b0kUrzFgRcGgdn1gF-tz-fZPEG08sbwjJr6H6qIE";
const SHEET_NAME = "database";
let allData = [];

async function fetchData() {
  const url = `https://sheets.googleapis.com/v4/spreadsheets/${SHEET_ID}/values/${SHEET_NAME}?key=${API_KEY}`;
  const res = await fetch(url);
  const data = await res.json();
  const rows = data.values;
  const headers = rows[0];
  allData = rows.slice(1).map(row => Object.fromEntries(headers.map((h, i) => [h, row[i] || ""])))
  populateFilters();
  renderChart();
}

function populateFilters() {
  const classSet = new Set(allData.map(d => d.class));
  const roomSet = new Set(allData.map(d => d.room));
  
  const classSelect = document.getElementById("filterClass");
  const roomSelect = document.getElementById("filterRoom");

  Array.from(classSet).sort().forEach(cls => {
    classSelect.innerHTML += `<option value="${cls}">${cls}</option>`;
  });
  Array.from(roomSet).sort().forEach(rm => {
    roomSelect.innerHTML += `<option value="${rm}">${rm}</option>`;
  });

  classSelect.addEventListener("change", renderChart);
  roomSelect.addEventListener("change", renderChart);
}

function renderChart() {
  const selectedClass = document.getElementById("filterClass").value;
  const selectedRoom = document.getElementById("filterRoom").value;

  const filtered = allData.filter(row => {
    return (!selectedClass || row.class === selectedClass) &&
           (!selectedRoom || row.room === selectedRoom);
  });

  const count = {};
  filtered.forEach(r => {
    const label = r.result || "ไม่ระบุ";
    count[label] = (count[label] || 0) + 1;
  });

  const ctx = document.getElementById("resultChart");
  if (ctx.chartInstance) ctx.chartInstance.destroy();

  const chart = new Chart(ctx, {
    type: 'bar',
    data: {
      labels: Object.keys(count),
      datasets: [{
        label: 'จำนวน',
        data: Object.values(count),
        backgroundColor: '#3b82f6'
      }]
    },
    options: {
      responsive: true,
      scales: { y: { beginAtZero: true, ticks: { stepSize: 1 } } }
    }
  });
  ctx.chartInstance = chart;
}

fetchData();
</script>
</body>
</html>
